# Pleroma: A lightweight social networking server
# Copyright Â© 2017-2019 Pleroma Authors <https://pleroma.social/>
# SPDX-License-Identifier: AGPL-3.0-only

defmodule Pleroma.Web.Federator.Publisher do
  @moduledoc """
  Defines the contract used by federation implementations to publish messages to
  their peers.
  """

  @doc """
  Determine whether an activity can be relayed using the federation module.
  """
  @callback is_representable?(Pleroma.Activity.t()) :: boolean()

  @doc """
  Relays an activity to a specified peer, determined by the parameters.  The
  parameters used are controlled by the federation module.
  """
  @callback publish_one(Map.t()) :: {:ok, Map.t()} | {:error, any()}

  @doc """
  Relays an activity to all specified peers.
  """
  @callback publish(Pleroma.User.t(), Pleroma.Activity.t()) :: :ok | {:error, any()}

  @doc """
  Enqueues work generated by the federation module.
  """
  @spec enqueue(module(), keyword()) :: :ok
  def enqueue(module, args), do: PleromaJobQueue.enqueue(:federation_outgoing, module, args)

  @doc """
  Enqueue publishing a single activity.
  """
  @spec enqueue_one(module(), Map.t()) :: :ok
  def enqueue_one(module, %{} = args), do: enqueue(module, [:publish_one, args])
end
